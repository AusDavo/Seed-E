// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================================= //
//                            MODELS                                 //
// ================================================================= //

enum KeyPolicyType {
  P2WSH
  P2TR
  P2SH
}

// Represents an individual or entity providing signing services.
model Provider {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username        String  @unique
  passwordHash    String
  twoFactorSecret String? // Encrypted TOTP secret
  penaltyCount    Int     @default(0)

  // The services (key offerings) this provider has.
  services Service[]
}

// Represents a specific key being offered as a service by a Provider.
model Service {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])

  // The policy type of the key being offered (e.g., Taproot, SegWit).
  policyType KeyPolicyType

  // The extended public key for this service.
  xpub String @unique

  // The signature proving the provider controls the xpub.
  controlSignature String

  // The initial fee to get access to the xpub. In sats.
  initialBackupFee BigInt

  // The fee for each subsequent signature. In sats.
  perSignatureFee BigInt

  // The minimum time delay (in hours) before a signed PSBT can be returned.
  minTimeDelay Int @default(168) // Default to 7 days (168 hours)

  // An optional monthly fee for ongoing service. In sats.
  monthlyFee BigInt?

  // An optional annual fee for ongoing service. In sats.
  annualFee BigInt?

  // The BOLT12 offer string for receiving payments.
  bolt12Offer String

  // A flag to show if the service is active and listed.
  isActive Boolean @default(true)

  // The clients who have purchased this service.
  clients Client[]
}

// Represents a Client's relationship with a specific Service they have purchased.
model Client {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username        String  @unique
  passwordHash    String
  twoFactorSecret String? // Encrypted TOTP secret

  // The payment hash of the invoice used to create/renew the subscription.
  // This will be used to link LND webhook events back to the client.
  paymentHash String? @unique

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  // Tracks the expiration date of the client's subscription for this service.
  subscriptionExpiresAt DateTime?

  // The pending signature requests from this client.
  signatureRequests SignatureRequest[]
}

enum RequestStatus {
  PENDING    // Client has paid, waiting for provider to sign.
  SIGNED     // Provider has signed and submitted the PSBT.
  COMPLETED  // Client has acknowledged/received the signed PSBT.
  EXPIRED    // The request timed out.
}

// Represents a request from a Client for a signature from a Provider.
model SignatureRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  // The PSBT (Partially Signed Bitcoin Transaction) needing a signature.
  // Stored as a base64 string.
  unsignedPsbt String

  // The PSBT after the provider has signed it.
  signedPsbt String?

  // The timestamp when the signed PSBT can be released to the client.
  unlocksAt DateTime

  // The timestamp when the provider uploaded the signed PSBT.
  signedAt DateTime?

  status RequestStatus @default(PENDING)
}
