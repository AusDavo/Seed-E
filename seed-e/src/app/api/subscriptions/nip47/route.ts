import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { generateSecretKey, finalizeEvent } from "nostr-tools";

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { clientId, serviceId, subscriptionType } = body;

    if (!clientId || !serviceId || !subscriptionType) {
      return NextResponse.json(
        { error: "Client ID, service ID, and subscription type are required" },
        { status: 400 }
      );
    }

    // Find the client and service
    const client = await prisma.client.findUnique({
      where: { id: clientId },
      include: {
        service: {
          include: {
            provider: true,
          },
        },
      },
    });

    if (!client) {
      return NextResponse.json({ error: "Client not found" }, { status: 404 });
    }

    // Calculate subscription amount based on type
    let subscriptionAmount: bigint;
    if (subscriptionType === "monthly") {
      subscriptionAmount = client.service.monthlyFee || BigInt(0);
    } else if (subscriptionType === "annual") {
      subscriptionAmount = client.service.annualFee || BigInt(0);
    } else {
      return NextResponse.json(
        { error: "Invalid subscription type" },
        { status: 400 }
      );
    }

    if (subscriptionAmount === BigInt(0)) {
      return NextResponse.json(
        { error: "No subscription fee configured for this service" },
        { status: 400 }
      );
    }

    // Generate NIP-47 request
    const privateKey = generateSecretKey();

    const nip47Request = finalizeEvent(
      {
        kind: 23194, // NIP-47 request
        created_at: Math.floor(Date.now() / 1000),
        tags: [
          ["p", client.service.provider.id], // Provider's pubkey
          ["amount", subscriptionAmount.toString()],
          ["description", `Seed-E ${subscriptionType} subscription`],
        ],
        content: JSON.stringify({
          method: "pay_invoice",
          params: {
            invoice: "", // Will be generated by provider
            amount: subscriptionAmount.toString(),
          },
        }),
      },
      privateKey
    );

    // Store subscription request
    const subscriptionRequest = await prisma.subscriptionRequest.create({
      data: {
        clientId,
        serviceId,
        subscriptionType,
        amount: subscriptionAmount,
        nip47Request: JSON.stringify(nip47Request),
        status: "PENDING",
      },
    });

    return NextResponse.json({
      subscriptionRequestId: subscriptionRequest.id,
      nip47Request: nip47Request,
      amount: subscriptionAmount.toString(),
      message: "NIP-47 subscription request created",
    });
  } catch (error) {
    console.error("NIP-47 subscription request failed:", error);
    return NextResponse.json(
      { error: "Failed to create subscription request" },
      { status: 500 }
    );
  }
}

export async function PUT(request: Request) {
  try {
    const body = await request.json();
    const { subscriptionRequestId, nip47Response } = body;

    if (!subscriptionRequestId || !nip47Response) {
      return NextResponse.json(
        { error: "Subscription request ID and NIP-47 response are required" },
        { status: 400 }
      );
    }

    // Find the subscription request
    const subscriptionRequest = await prisma.subscriptionRequest.findUnique({
      where: { id: subscriptionRequestId },
      include: {
        client: true,
        service: true,
      },
    });

    if (!subscriptionRequest) {
      return NextResponse.json(
        { error: "Subscription request not found" },
        { status: 404 }
      );
    }

    // Verify NIP-47 response
    try {
      const response = JSON.parse(nip47Response);
      if (response.result && response.result.preimage) {
        // Payment successful
        await prisma.subscriptionRequest.update({
          where: { id: subscriptionRequestId },
          data: { status: "COMPLETED" },
        });

        // Update client subscription
        const subscriptionExpiresAt = new Date();
        if (subscriptionRequest.subscriptionType === "monthly") {
          subscriptionExpiresAt.setMonth(subscriptionExpiresAt.getMonth() + 1);
        } else {
          subscriptionExpiresAt.setFullYear(
            subscriptionExpiresAt.getFullYear() + 1
          );
        }

        await prisma.client.update({
          where: { id: subscriptionRequest.clientId },
          data: { subscriptionExpiresAt },
        });

        return NextResponse.json({
          success: true,
          message: "Subscription payment completed",
          subscriptionExpiresAt,
        });
      } else {
        throw new Error("Invalid NIP-47 response");
      }
    } catch {
      await prisma.subscriptionRequest.update({
        where: { id: subscriptionRequestId },
        data: { status: "FAILED" },
      });

      return NextResponse.json(
        { error: "Invalid NIP-47 response" },
        { status: 400 }
      );
    }
  } catch (error) {
    console.error("NIP-47 subscription processing failed:", error);
    return NextResponse.json(
      { error: "Failed to process subscription payment" },
      { status: 500 }
    );
  }
}
