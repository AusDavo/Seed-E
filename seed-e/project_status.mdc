---
description:
globs:
alwaysApply: false
---
# Seed-E Project Status

## 🎯 **Current Status: Real Key Integration COMPLETED**

### **Phase 1: Core Infrastructure ✅ COMPLETED**
- ✅ Next.js 15 with App Router and TypeScript
- ✅ Tailwind CSS v3 with dark mode support
- ✅ Prisma ORM with PostgreSQL database
- ✅ Authentication system with 2FA
- ✅ Provider and Client dashboards
- ✅ Basic signature request flow

### **Phase 2: Real Key Integration ✅ COMPLETED**
- ✅ Migrated provider policies API to use Prisma database
- ✅ Added real Bitcoin key validation using bip32 and tiny-secp256k1
- ✅ Added Base64 signature validation (64 bytes for ECDSA)
- ✅ Added BOLT12 offer format validation
- ✅ Created real test data generation script
- ✅ Fixed server startup and Docker container management
- ✅ Added duplicate xpub validation to prevent same key being used twice
- ✅ Added "Fill Test Data" button for easier testing with fresh real data
- ✅ Added "Clear Form" button for form reset
- ✅ Added clickable key cards with detailed modal view
- ✅ Improved form validation with error messages
- ✅ Added visual indicators for clickable elements
- ✅ **NO MORE DUMMY DATA** - All test data is cryptographically valid

### **Phase 3: Key Derivation and Management (NEXT)**
- 🔄 Implement key derivation from master keys
- 🔄 Add key backup and recovery functionality
- 🔄 Implement key rotation and replacement
- 🔄 Add key usage analytics and monitoring

### **Phase 4: Service Discovery and Integration (PLANNED)**
- ⏳ Implement service discovery protocol
- ⏳ Add Lightning Network integration for payments
- ⏳ Implement client-provider communication
- ⏳ Add automated signature request processing

## 🚀 **Recent Achievements**

### **Real Bitcoin Integration**
- **Fresh Key Generation**: Each "Fill Test Data" click generates unique real Bitcoin keys
- **Cryptographic Validation**: All signatures are real ECDSA (64 bytes)
- **Duplicate Prevention**: System prevents same xpub being used twice
- **Real BIP32 Derivation**: Uses proper Bitcoin key derivation paths

### **Enhanced User Experience**
- **Interactive Key Cards**: Click to view full key details in modal
- **Real-time Validation**: Form validates as you type
- **Visual Feedback**: Clear indicators for clickable elements
- **Error Prevention**: Comprehensive validation prevents invalid submissions

### **Technical Improvements**
- **API Endpoints**: `/api/generate-test-data` for fresh real data
- **Database Integration**: Full Prisma integration with PostgreSQL
- **Error Handling**: Comprehensive error messages and validation
- **Performance**: Optimized form validation and state management

## 🔧 **Current "Add Key" Functionality:**
- ✅ **Real Bitcoin xpub validation** using BIP32
- ✅ **Real ECDSA signature validation** (64 bytes)
- ✅ **Real BOLT12 offer validation**
- ✅ **Duplicate key prevention**
- ✅ **Fresh real data generation** on demand
- ✅ **Interactive key management** with detailed views

## 📊 **Database Schema:**
- ✅ **Provider model** with authentication
- ✅ **Service model** with real Bitcoin data
- ✅ **Client model** for user management
- ✅ **SignatureRequest model** for transaction flow
- ✅ **SubscriptionRequest model** for payments

## 🎯 **Next Steps:**
1. **Phase 3**: Implement key derivation and management
2. **Phase 4**: Add service discovery and Lightning integration
3. **Testing**: Comprehensive testing with real Bitcoin scenarios
4. **Documentation**: Complete API documentation and user guides

## 🛠 **Technical Stack:**
- **Frontend**: Next.js 15, TypeScript, Tailwind CSS
- **Backend**: Next.js API routes, Prisma ORM
- **Database**: PostgreSQL with Docker
- **Bitcoin**: bitcoinjs-lib, bip32, tiny-secp256k1
- **Authentication**: TOTP 2FA with speakeasy
- **Validation**: Real-time form validation with error handling

## 🚨 **CRITICAL: SERVER MANAGEMENT**
**ALWAYS CHECK FOR EXISTING SERVER FIRST** - Before running `npm run dev` or starting any server, check if one is already running:
- Use `ps aux | grep "next dev"` to check for existing server
- Use `curl -I http://localhost:3000` to test if server is responding
- Only start new server if none exists or current one is not responding
- User already has terminal running - don't start new servers unnecessarily

## 🚨 **CRITICAL: DIRECTORY CONFUSION**
**DO NOT ASSUME WRONG DIRECTORY** - If localhost:3000 is working, the server IS running:
- User is in `/Users/homefolder/Desktop/Seed-E` (correct for this project)
- Server is running via Docker/PostgreSQL setup
- If localhost responds, server is working - focus on actual errors
- Don't suggest `cd seed-e` when localhost is already working
- The issue is likely API validation, not directory problems
