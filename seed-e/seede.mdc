---
description: 
globs: 
alwaysApply: false
---
# Seed-E

## üõ°Ô∏è Core Mission

Seed-E is a decentralized and unopinionated directory connecting Bitcoin users with third-party signing and backup service providers. It is designed to be integrated directly into wallet software, offering users a secure and neutral platform to enhance their multisig setups without compromising privacy or sovereignty.

---

## üîë Core Principles

1.  **User Sovereignty:** The user is always in control. We never have access to private keys.
2.  **Platform Neutrality:** Seed-E does not rank, rate, or recommend providers. We provide a randomized, unfiltered directory and empower the user to make their own informed decisions. The client can filter by ProviderSince, or search. It's the only two options there.
3.  **Minimal Digital Footprint:** No KYC, no emails, no invasive tracking. Authentication is handled through cryptographic identifiers and user-chosen passwords.
4.  **Verifiable Control:** Our single most important function is to verify, via cryptographic signature, that a provider has control over the public key they are offering.

---

## üõ†Ô∏è Technical Architecture

*   **Framework:** Next.js with the App Router
*   **Language:** TypeScript
*   **Styling:** Tailwind CSS
*   **Database:** PostgreSQL with Prisma ORM (Recommended)
*   **Payments:** Bitcoin Lightning Network

---

## üåä User & Provider Flow

### Provider Onboarding

1.  A provider generates a new, dedicated key pair (`privkey`, `xpub`) for their service.
2.  To be listed, they must first prove control. They sign a static message (e.g., `"I, [Provider Name], attest control of xpub: [xpub] for Seed-E."`).
3.  They submit the `xpub` and the `signature` to the Seed-E backend.
4.  The backend cryptographically verifies the signature against the public key derived from the `xpub`.
5.  Upon verification, the provider can create their service profile, setting their prices and descriptive text.

### Client Purchase & Key Retrieval

1.  The client, using their wallet software, accesses the Seed-E plugin.
2.  They browse the **randomized list** of verified providers.
3.  They use filters for cost, address type, or provider tenure to narrow the options based on their own criteria.
4.  They select a provider and are presented with a Lightning Invoice for the service fee.
5.  **Upon successful payment, the Seed-E backend immediately releases the pre-verified `xpub` to the client's wallet.**
6.  Simultaneously, the backend generates a unique, non-secret **Client ID** and prompts the user to create a strong **password**. This ID/password pair is their authentication method for future signing requests with this provider.

### Signing Request Flow (Authentication)

1.  When the client needs a signature, their wallet sends a request to Seed-E containing their `Client ID`.
2.  The Seed-E backend challenges the client for their password.
3.  Once authenticated, the client can submit their unsigned PSBT to the provider via the Seed-E API.
4.  The provider signs and returns the PSBT.

---

## üåê Provider Display & Sorting Philosophy

**Seed-E takes no opinion on provider quality.** Our platform is a neutral directory, not a rating system. Reputation is external and must be evaluated by the user.

*   **Randomized by Default:** To ensure fairness and neutrality, the list of providers is shuffled every time it is loaded. No provider is given a permanent "top spot."
*   **No Ranking Scores:** We do not use any form of "rank score" or "reputation metric." Such metrics are either gameable or require invasive tracking, both of which we reject.
*   **User-Controlled Filtering:** We provide objective tools for the user to make their own decisions. A user can filter the list by:
    *   **Provider Since (Date):** The date the provider first listed a service.
    *   **Cost of Service:** The provider's stated price.
    *   **Address Type:** (e.g., Taproot, SegWit).

---

## üöÄ Getting Started

To create the project structure, run the following commands in your terminal.

```bash
# 1. Create the Next.js project
npx create-next-app@latest Seed-E --typescript --tailwind --eslint --app --src-dir

# 2. Navigate into your new project directory
cd Seed-E

# 3. Initialize a git repository
git init
git add .
git commit -m "Initial commit: Setup Seed-E project with Next.js, TypeScript, and Tailwind"

# 4. Open the project in your code editor
code .
```

## üìù Next Steps

1.  **Define Database Schema:** Model the `Provider`, `Service`, and `Client` tables.
2.  **Build API Endpoints:** Create the necessary API routes in Next.js for provider onboarding, client authentication, and handling PSBTs.
3.  **Develop UI Components:** Build the React components for the randomized provider list, detail pages, and the payment flow.
